add character groups for on_stages in react

mind hard coding on updates for line-related things that aren't exactly lines (eg stage directions, sound cues). Some hard-coding in LineShow.js that could break.

find other times to use character select

new production doesn't forward to the production page on create.

speed up production copier by adding Line.import etc

regularlize sound cues so line_number is whatever it is on stage directions

hide SDs from view where type = mixed or where content null

write a way to export the script text to an editable form--gdocs ideally?

on importer--when two characters share a line, one of them is not getting the content assigned (see jaques/amiens 2.5.43)

check importer--why does epilogue have line number = 0, act = 0?

in playscript edit fix accordions
in play script edit find a way to make the header and accordions sticky so that you can always see act tabs, nav, and title and time counts, cut show/hide etc

in script edit :
edits on stage directions don't seem to be working quite right. Writing to DB but not updating state until reload

look at cast list--do I need to get jobs from server or can I just filter out of production?

Rehearsal scheduler request: curl -X PUT -H "Content-Type: application/json" -d '{"rehearsal_block_length":"30","rehearsal_break_length":"5", "rehearsal_days_of_week": "'Monday','Tuesday'", "rehearsal_end_date":"2020-04-20", "rehearsal_end_time":"18:00:00","rehearsal_start_date": "2020-04-10", "rehearsal_start_time": "14:00:00", "rehearsal_time_between_breaks": "55"}' http://localhost:3001/api/productions/66/build_rehearsal_schedule

make a script to add users to on_stages when casting is set (see test.rb for an example that works)

check that users save removes ones whose things have been unscheduled

On some future pass, make rehearsal time and notes editable by double clicking

when a tall form closes, scroll to the top of the containing element (somehow)

make "schedule this content" and "schedule these people" buttons float along the side so that you don't have to scroll around to find them.
export AWS_PROFILE=henslowe
docker pull 045889525760.dkr.ecr.us-east-1.amazonaws.com/henslowe_api:latest

docker run -i -t aa2c56601bd9 /bin/bash ## /s/aa2c etc with image id 


rvm use gemset ruby-2.6.3@henslowe5

rails s -p 3001
# ** may need to do redis-server
# bundle exec sidekiq
cd client
npm start


cancel all redis cue this way: Sidekiq.redis { |conn| conn.flushdb }

TO UPDATE HC IMAGE:
#build new docker image
docker build -t 045889525760.dkr.ecr.us-east-1.amazonaws.com/henslowe_api .

#get ECR login and pass it to docker image thing
  aws ecr get-login-password --region us-east-1 --profile hc_docker|sudo docker login --username AWS --password-stdin 045889525760.dkr.ecr.us-east-1.amazonaws.com
#push image to AWS ECR
docker push 045889525760.dkr.ecr.us-east-1.amazonaws.com/henslowe_api:latest
#in AWS ECS, update service, checking the "force new deployment" box
To build it all & run locally:
docker-compose build

#update task on AWS ECR
ecs-cli compose --project-name hc-cluster --file docker-compose.yml --debug service up  --deployment-max-percent 200 --deployment-min-healthy-percent 50 --region us-east-1>

#to migrate db just do it from the command line locally
bundle exec rake db:migrate RAILS_ENV=production

Making one test edit